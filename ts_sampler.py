"""
Music Sampler Library
Do not edit this file!  Instead, look at musical_keys.py.
"""

import pygame
import tsk
import tsapp
pygame.init()

_valid_instruments = ["bass", "electric_guitar", "flute",
                      "piano", "trumpet", "tuba"]

_note_aliases = { "B_sharp" : "C",
                  "E_sharp" : "F"
                }

_valid_notes = ["A", "A_sharp", "B", "C_high", "C", "C_sharp", "D", "D_sharp", "E", "F", "F_sharp", "G", "G_sharp"]
_note_heights = {"C_high" : 12,
                 "C" : 12,
                 "C_sharp" : 11,
                 "D" : 10,
                 "D_sharp" : 9,
                 "E" : 8,
                 "F" : 7,
                 "F_sharp" : 6,
                 "G" : 5,
                 "G_sharp" : 4,
                 "A" : 3,
                 "A_sharp" : 2,
                 "B" : 1,
                 }
_current_instrument = "piano"
_current_ms_per_beat = 500
_notes = []
_note_sprites = []
_column_size = 120


def print_instruments():
    print("Valid instruments:")
    instrument_string = ""
    for inst in _valid_instruments:
        instrument_string += inst.replace("_", " ") + ", "
    print(instrument_string[:-2])

def add_note(note):
    note = note[0].upper() + note[1:]
    note = note.replace("#", "_sharp")
    if note in _note_aliases:
        note = _note_aliases[note]
    if _note_is_valid(note):
        _notes.append(Note(_current_instrument, note, _current_ms_per_beat))
    else:
        print("Error: Could not play a note \"" + instrument + "\".\nPlease call play_note() with a string \"A\" to \"G\" or \"A#\" to \"G#\".")


def rest():
    _notes.append(Note(_current_instrument, "", _current_ms_per_beat))


def set_instrument(instrument):
    instrument = instrument.lower().replace(" ", "_")
    global _current_instrument
    if instrument in _valid_instruments:
        _current_instrument = instrument
    else:
        print("Error: Could not find an instrument called \"" + instrument + "\".\nPlease call set_instrument with a valid instrument name as the argument.")


def set_tempo(tempo):
    try:

        if _is_int(tempo):
            t = int(tempo)
        elif _is_float(tempo):
            t = float(tempo)
        else:
            raise ValueError

        if t <= 0:
            raise ValueError

        global _current_ms_per_beat
        _current_ms_per_beat = (60 / t) * 1000
    except ValueError:
        print("Error: Could not set the tempo to \"" + str(tempo) + "\".\nPlease call set_tempo with a postive number (beats per minute) as the argument.")


def _note_is_valid(note):
    for v in _valid_notes:
        if note == v:
            return True
    return False


def _is_float(value):
    try:
        float(value)
        return True
    except ValueError:
        return False

def _is_int(value):
    try:
        int(value)
        return True
    except ValueError:
        return False


def run():
    playing = True
    w = tsapp.GraphicsWindow(background_color=(40, 40, 40))
    _setup_bg(w)
    rest()

    note_index = 0
    note_time = tsapp.get_program_duration()
    note_duration = _notes[note_index].length

    title_display = tsapp.TextLabel("OpenSans-Regular.ttf", 30, 40, 40, 450, text="Song Sampler", color=(200, 220, 230))
    bpm_display = tsapp.TextLabel("OpenSans-Regular.ttf", 30, 40, 90, 450, text="BPM: ", color=(200, 220, 230))
    instrument_display = tsapp.TextLabel("OpenSans-Regular.ttf", 30, 518 + 40, 90, 450, text="Instrument: ", color=(200, 220, 230))
    w.add_object(bpm_display)
    w.add_object(instrument_display)
    w.add_object(title_display)

    while playing:

        note_time_so_far = tsapp.get_program_duration() - note_time

        if note_time_so_far >= note_duration:
            if note_index >= len(_notes):
                playing = False
            else:
                _notes[note_index].play()
                note_duration = _notes[note_index].length
                note_time = tsapp.get_program_duration()
                for note_sprite in _note_sprites:
                    note_sprite.x -= _column_size
                bpm_display.text = "BPM: " + str(int(60 / (_notes[note_index].length / 1000)))
                display_inst = _notes[note_index].instrument.replace("_", " ")
                display_inst = display_inst[:1].upper() + display_inst[1:]
                instrument_display.text = "Instrument: " + display_inst
            note_index += 1

        _draw_graphics(w, note_index)


def _setup_bg(w):
    for i in range(8):
        box = tsapp.Sprite("DialogueBoxBlue.png", i * _column_size + 29, 50)
        box.angle = 90
        box.scale = 0.4
        box.center = (89 + _column_size * i, 330)
        w.add_object(box)
    for i in range(len(_notes)):
        if _notes[i].note != "":
            note = tsapp.Sprite("Note1.png", 0, 0)
            note.scale = 0.5
            note.center = (89 + _column_size * i, _note_heights[_notes[i].note] * 27 + 145)
            _note_sprites.append(note)
            w.add_object(note)

def _draw_graphics(w, note_index):
    w.finish_frame()


class Note:
    def __init__(self, instrument, note, length):
        self.instrument = instrument
        self.note = note
        self.length = length



    def play(self):
        if self.note == "":
            pass
        else:
            sound_file = self.instrument + "_" + self.note + ".mp3"
            sound = pygame.mixer.Sound(sound_file)
            sound.play()